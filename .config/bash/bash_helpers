#!/usr/bin/env bash
# vim: set filetype=bash : 
#
# This file is only intended for helper functions
#

###=========###
##  COLOURS  ##
###=========###
C0='\033[0m'
CRB='\033[91;1m'
CGB='\033[92;1m'
CYB='\033[93;1m'

###=========###
##  LOGGERS  ##
###=========###

# 
#   Logs OK to /dev/stdout.
# @arg0 msg: <T>: which can be displayed by echo
#
log_ok() {
  echo -e "${CGB}[OK!]${C0} ${1:-Done}"
}

# 
#   Logs OK to /dev/stdout.
# @arg0 msg: <T>: which can be displayed by echo
#
log_wrn() {
  echo -e "${CYB}[WRN]${C0} ${1:-Something interesting happening!..}"
}

# 
#   Logs error to /dev/stderr.
# @arg0 msg: <T>: which can be displayed by echo
#
log_err() {
  >&2 echo -e "${CRB}[ERR]${C0} ${1:-Unknown error occured!..}"
}

###=========###
##    GIT    ##
###=========###

#
#    Stages files, then commits.
#  @arg0: commit message
#  @arg1..: files
#
gacm() {
  if [ $# -ge 2 ]; then
    files=("${@:2}")
    git add "${files[@]}" && git commit -m "$1" "${files[@]}"
  else
    log_err "gacm <commit message> <[files]>"
  fi
}

#
#    Deletes branch from remote and local.
#  @arg0: branch name
#  @arg1: **optional**, remote name
#
gdbr() {
  if [ $# -le 2 ]; then
    git push "${2:-gh}" --delete "$1" && git branch -D "$1"
  else
    log_err "gdbr <branch name> [remote name]"
  fi
}

#
#    Pushes local commits to remote...
#  @arg0: **optional**, remote-name (default: gh)
#  @arg1: **optional**, branch-name (default: dev)
#
gpush() {
  branch_name="$(git symbolic-ref HEAD 2>/dev/null)" ||
    branch_name="(unnamed branch)"     # detached HEAD
  if [ $# -eq 1 ]; then
    if ! [[ "$branch_name" = "(unnamed branch)" ]]; then
      branch_name=${branch_name##refs/heads/}
      if [ "$branch_name" = "$1" ]; then
        log_wrn "Assuming the remote is gh..."
        git push -u gh "$1"
      else
        log_wrn "Assuming the current branch is dev..."
        git push -u "$1" dev
      fi
    else
      log_err "Use with the second parameter"
      log_wrn "Usage: gpush <remote:-gh> <branch:-dev>"
    fi
  elif [[ $# -eq 2 ]] || [[ $# -eq 0 ]]; then
    log_wrn "Assuming remote is gh and branch is dev."
    git push -u "${1:-gh}" "${2:-dev}" && log_ok "gpush done!.."
  fi
}

#
#    Mounts that drive into that folder.
#  @arg0: mount folder name
#  @arg1: drive to be mounted
#
mntdir() {
  if [ $# -eq 2 ]; then
    mkdir -p "$1" && sudo mount "$2" "$1"
  else
    log_err "mntdir <path> <drive>"
  fi
}

#
#    Unmounts that drive, and removes mountpoint folder.
#  @arg0: mount folder name
#
umntdir() {
  if [ $# -eq 1 ]; then 
    sudo umount -R "$1" && rm -rf "$1"
  else
    log_err "umntdir <mount_point>"
  fi
}

#
#    Sets fan's speed.
#  @arg0: fan speed
#
flvl() {
  sudo -- sh -c "echo ${1:-255} > '/sys/devices/platform/asus-nb-wmi/hwmon/$(ls /sys/devices/platform/asus-nb-wmi/hwmon)/pwm1'"
}

#
#    Enables/disables fan.
#  @arg0: 0 for stop, 1 for manuel, 2 for auto
#
fctrl() {
  sudo -- sh -c "echo ${1:-255} > '/sys/devices/platform/asus-nb-wmi/hwmon/$(ls /sys/devices/platform/asus-nb-wmi/hwmon)/pwm1_enable'"
}

###=========###
##  OTHERS   ##
###=========###

#
#   If the given Path is not exist in PATH env variable
# exports it to PATH env var
#
export_check() {
  case ":${PATH}:" in
    *:"$1":*) ;;
    *) export PATH="$1:$PATH";;
  esac
}

#
#    Create directory, and cd to it.
#  @arg0: path to create dir, and navigate
#
mcdr() {
  if [ $# -eq 1 ]; then
    mkdir -p "$1" && cd "$1"
  else
    log_err "mcdr <path>"
  fi
}
